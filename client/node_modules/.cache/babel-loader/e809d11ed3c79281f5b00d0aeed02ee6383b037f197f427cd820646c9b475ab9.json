{"ast":null,"code":"const express = require(\"express\");\nconst mysql = require(\"mysql2\");\nconst dotenv = require(\"dotenv\");\nconst cors = require(\"cors\");\ndotenv.config(); // Load environment variables from .env file\nconst app = express();\n\n// Middleware\napp.use(cors()); // Enable CORS for cross-origin requests\napp.use(express.json()); // Parse JSON request bodies\n\n// MySQL Connection\nconst db = mysql.createConnection({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME\n});\n\n// Connect to MySQL\ndb.connect(err => {\n  if (err) {\n    console.error(\"❌ MySQL connection failed:\", err.message);\n  } else {\n    console.log(\"✅ Connected to MySQL Database\");\n  }\n});\n\n// -------- API ROUTES --------\n\n// Get all factories (e.g., VEHICLE FACTORY 1, VEHICLE FACTORY 2, VEHICLE FACTORY 3)\napp.get(\"/api/factories\", (req, res) => {\n  db.query(\"SELECT * FROM vehicle_factories\", (err, results) => {\n    if (err) {\n      console.error(\"Error fetching factories:\", err);\n      return res.status(500).send(\"Error fetching factories\");\n    }\n    res.json(results);\n  });\n});\n\n// Get machines by factory ID\napp.get(\"/api/machines/:factoryId\", (req, res) => {\n  const {\n    factoryId\n  } = req.params;\n  db.query(\"SELECT * FROM machines WHERE vehicle_factory_id = ?\", [factoryId], (err, results) => {\n    if (err) {\n      console.error(`Error fetching machines for factory ${factoryId}:`, err);\n      return res.status(500).send(\"Error fetching machines\");\n    }\n    res.json(results);\n  });\n});\n\n// Map: Frontend API endpoint name to Backend Database table name\n// These keys (e.g., \"vf1-ac-filling\") must exactly match the\n// `formName` parameter sent from your frontend's axios.post requests.\nconst formTableMap = {\n  // VF1 Forms\n  \"vf1-ac-filling\": \"AC_Filling_vf1\",\n  \"vf1-clutch-filling\": \"Clutch_Process_vf1\",\n  \"vf1-coolant-filling\": \"Coolant_Process_vf1\",\n  \"vf1-power-steering\": \"Power_Steering_vf1\",\n  \"vf1-urea-filling\": \"Urea_Filling_vf1\",\n  // VF2 Forms\n  \"vf2-ac-filling\": \"AC_Filling_vf2\",\n  \"vf2-clutch-filling\": \"Clutch_Process_vf2\",\n  \"vf2-coolant-filling\": \"Coolant_Process_vf2\",\n  \"vf2-power-steering\": \"Power_Steering_vf2\",\n  \"vf2-urea-filling\": \"Urea_Filling_vf2\",\n  // VF3 Forms\n  \"vf3-ac-filling\": \"AC_Filling_vf3\",\n  \"vf3-clutch-filling\": \"Clutch_Process_vf3\",\n  \"vf3-coolant-filling\": \"Coolant_Process_vf3\",\n  \"vf3-power-steering\": \"Power_Steering_vf3\",\n  \"vf3-urea-filling\": \"Urea_Filling_vf3\",\n  \"vf3-diesel-filling\": \"Diesel_Filling_vf3\"\n};\n\n// Generic dynamic form submission route\n// This route handles POST requests for all your forms.\napp.post(\"/api/:formName\", (req, res) => {\n  const {\n    formName\n  } = req.params; // Get the formName from the URL parameter\n  const table = formTableMap[formName]; // Look up the corresponding table name\n\n  // Check if a valid table name was found for the given formName\n  if (!table) {\n    console.error(`Invalid form name received: '${formName}'. No table mapping found.`);\n    return res.status(400).json({\n      error: \"Invalid form name. No corresponding database table found.\"\n    });\n  }\n  const data = req.body; // The form data sent from the frontend\n  const fields = Object.keys(data); // Extract field names (column names)\n  const values = Object.values(data); // Extract values for insertion\n  const placeholders = fields.map(() => \"?\").join(\",\"); // Create placeholders for the SQL query\n\n  // Construct the SQL INSERT query dynamically\n  const query = `INSERT INTO ${table} (${fields.join(\", \" // Join fields with comma and space\n  )}) VALUES (${placeholders})`;\n\n  // Execute the query\n  db.query(query, values, (err, result) => {\n    if (err) {\n      console.error(`Error inserting data into table '${table}' for form '${formName}':`, err);\n      // Provide more specific error details in development for easier debugging\n      return res.status(500).json({\n        error: \"Database error during data insertion.\",\n        details: err.message,\n        sql: query // Include the SQL query for debugging purposes\n      });\n    }\n    console.log(`✅ Data successfully inserted into ${table}. Insert ID: ${result.insertId}`);\n    res.json({\n      message: \"✅ Data submitted successfully\"\n    });\n  });\n});\n\n// Start the server\nconst PORT = process.env.PORT || 5000; // Use port from .env or default to 5000\napp.listen(PORT, () => {\n  console.log(`🚀 Server running at http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","mysql","dotenv","cors","config","app","use","json","db","createConnection","host","process","env","DB_HOST","user","DB_USER","password","DB_PASSWORD","database","DB_NAME","connect","err","console","error","message","log","get","req","res","query","results","status","send","factoryId","params","formTableMap","post","formName","table","data","body","fields","Object","keys","values","placeholders","map","join","result","details","sql","insertId","PORT","listen"],"sources":["C:/Users/utsav/OneDrive/Desktop/TATA_TRACEABILITY/TML/client/src/App.js"],"sourcesContent":["const express = require(\"express\");\r\nconst mysql = require(\"mysql2\");\r\nconst dotenv = require(\"dotenv\");\r\nconst cors = require(\"cors\");\r\n\r\ndotenv.config(); // Load environment variables from .env file\r\nconst app = express();\r\n\r\n// Middleware\r\napp.use(cors()); // Enable CORS for cross-origin requests\r\napp.use(express.json()); // Parse JSON request bodies\r\n\r\n// MySQL Connection\r\nconst db = mysql.createConnection({\r\n  host: process.env.DB_HOST,\r\n  user: process.env.DB_USER,\r\n  password: process.env.DB_PASSWORD,\r\n  database: process.env.DB_NAME,\r\n});\r\n\r\n// Connect to MySQL\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error(\"❌ MySQL connection failed:\", err.message);\r\n  } else {\r\n    console.log(\"✅ Connected to MySQL Database\");\r\n  }\r\n});\r\n\r\n// -------- API ROUTES --------\r\n\r\n// Get all factories (e.g., VEHICLE FACTORY 1, VEHICLE FACTORY 2, VEHICLE FACTORY 3)\r\napp.get(\"/api/factories\", (req, res) => {\r\n  db.query(\"SELECT * FROM vehicle_factories\", (err, results) => {\r\n    if (err) {\r\n      console.error(\"Error fetching factories:\", err);\r\n      return res.status(500).send(\"Error fetching factories\");\r\n    }\r\n    res.json(results);\r\n  });\r\n});\r\n\r\n// Get machines by factory ID\r\napp.get(\"/api/machines/:factoryId\", (req, res) => {\r\n  const { factoryId } = req.params;\r\n  db.query(\r\n    \"SELECT * FROM machines WHERE vehicle_factory_id = ?\",\r\n    [factoryId],\r\n    (err, results) => {\r\n      if (err) {\r\n        console.error(`Error fetching machines for factory ${factoryId}:`, err);\r\n        return res.status(500).send(\"Error fetching machines\");\r\n      }\r\n      res.json(results);\r\n    }\r\n  );\r\n});\r\n\r\n// Map: Frontend API endpoint name to Backend Database table name\r\n// These keys (e.g., \"vf1-ac-filling\") must exactly match the\r\n// `formName` parameter sent from your frontend's axios.post requests.\r\nconst formTableMap = {\r\n  // VF1 Forms\r\n  \"vf1-ac-filling\": \"AC_Filling_vf1\",\r\n  \"vf1-clutch-filling\": \"Clutch_Process_vf1\",\r\n  \"vf1-coolant-filling\": \"Coolant_Process_vf1\",\r\n  \"vf1-power-steering\": \"Power_Steering_vf1\",\r\n  \"vf1-urea-filling\": \"Urea_Filling_vf1\",\r\n\r\n  // VF2 Forms\r\n  \"vf2-ac-filling\": \"AC_Filling_vf2\",\r\n  \"vf2-clutch-filling\": \"Clutch_Process_vf2\",\r\n  \"vf2-coolant-filling\": \"Coolant_Process_vf2\",\r\n  \"vf2-power-steering\": \"Power_Steering_vf2\",\r\n  \"vf2-urea-filling\": \"Urea_Filling_vf2\",\r\n\r\n  // VF3 Forms\r\n  \"vf3-ac-filling\": \"AC_Filling_vf3\",\r\n  \"vf3-clutch-filling\": \"Clutch_Process_vf3\",\r\n  \"vf3-coolant-filling\": \"Coolant_Process_vf3\",\r\n  \"vf3-power-steering\": \"Power_Steering_vf3\",\r\n  \"vf3-urea-filling\": \"Urea_Filling_vf3\",\r\n  \"vf3-diesel-filling\": \"Diesel_Filling_vf3\",\r\n};\r\n\r\n// Generic dynamic form submission route\r\n// This route handles POST requests for all your forms.\r\napp.post(\"/api/:formName\", (req, res) => {\r\n  const { formName } = req.params; // Get the formName from the URL parameter\r\n  const table = formTableMap[formName]; // Look up the corresponding table name\r\n\r\n  // Check if a valid table name was found for the given formName\r\n  if (!table) {\r\n    console.error(\r\n      `Invalid form name received: '${formName}'. No table mapping found.`\r\n    );\r\n    return res\r\n      .status(400)\r\n      .json({\r\n        error: \"Invalid form name. No corresponding database table found.\",\r\n      });\r\n  }\r\n\r\n  const data = req.body; // The form data sent from the frontend\r\n  const fields = Object.keys(data); // Extract field names (column names)\r\n  const values = Object.values(data); // Extract values for insertion\r\n  const placeholders = fields.map(() => \"?\").join(\",\"); // Create placeholders for the SQL query\r\n\r\n  // Construct the SQL INSERT query dynamically\r\n  const query = `INSERT INTO ${table} (${fields.join(\r\n    \", \" // Join fields with comma and space\r\n  )}) VALUES (${placeholders})`;\r\n\r\n  // Execute the query\r\n  db.query(query, values, (err, result) => {\r\n    if (err) {\r\n      console.error(\r\n        `Error inserting data into table '${table}' for form '${formName}':`,\r\n        err\r\n      );\r\n      // Provide more specific error details in development for easier debugging\r\n      return res.status(500).json({\r\n        error: \"Database error during data insertion.\",\r\n        details: err.message,\r\n        sql: query, // Include the SQL query for debugging purposes\r\n      });\r\n    }\r\n    console.log(\r\n      `✅ Data successfully inserted into ${table}. Insert ID: ${result.insertId}`\r\n    );\r\n    res.json({ message: \"✅ Data submitted successfully\" });\r\n  });\r\n});\r\n\r\n// Start the server\r\nconst PORT = process.env.PORT || 5000; // Use port from .env or default to 5000\r\napp.listen(PORT, () => {\r\n  console.log(`🚀 Server running at http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}